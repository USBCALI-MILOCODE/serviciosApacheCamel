package co.com.rodriguezCaicedo.microservice.resolveEnigmaApi4.api;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;

import co.com.rodriguezCaicedo.microservice.resolveEnigmaApi4.model.GetEnigmaStepResponse;
import co.com.rodriguezCaicedo.microservice.resolveEnigmaApi4.model.Header;
import co.com.rodriguezCaicedo.microservice.resolveEnigmaApi4.model.JsonApiBodyRequest;
import co.com.rodriguezCaicedo.microservice.resolveEnigmaApi4.servicio.RestTemplateService;

@Controller
public class GetStepApiController implements GetStepApi {
    private final Logger logger = LoggerFactory.getLogger(GetStepApiController.class);

    @Autowired
    private RestTemplateService restTemplateService;
    
    @Override
    public ResponseEntity<?> getStep(@Valid @RequestBody JsonApiBodyRequest body) {
        try {
            // Validación de la propiedad "step"
            String step = body.getData().get(0).getStep();
            if (!"1".equals(step)) {
                // Si el paso no es "1", devolver un mensaje de error
                return new ResponseEntity<>("El paso debe ser '1'", HttpStatus.BAD_REQUEST);
            }

            // Llamadas a los servicios
            ResponseEntity<String> response1 = restTemplateService.callService("http://localhost:8081/v1/getOneEnigma/getStep");
            ResponseEntity<String> response2 = restTemplateService.callService("http://localhost:8082/v1/getOneEnigma/getStep");
            ResponseEntity<String> response3 = restTemplateService.callService("http://localhost:8083/v1/getOneEnigma/getStep" );

            // Verificar si la llamada fue exitosa
            if (response1.getStatusCode().is2xxSuccessful() && response2.getStatusCode().is2xxSuccessful() && response3.getStatusCode().is2xxSuccessful()) {
                // Procesar las respuestas para obtener la descripción del paso
                String step1Description = processResponse(response1.getBody());
                String step2Description = processResponse(response2.getBody());
                String step3Description = processResponse(response3.getBody());

                // Construir la respuesta final
                GetEnigmaStepResponse stepResponse = new GetEnigmaStepResponse();
                Header header = body.getData().get(0).getHeader();
                stepResponse.setHeader(header);
                stepResponse.setStep("1");
                stepResponse.setStepDescription(step1Description + " - " + step2Description + " - " + step3Description);
                
                return new ResponseEntity<>(stepResponse, HttpStatus.OK);
            } else {
                // Al menos una llamada falló
                logger.error("Al menos una llamada a los servicios externos falló.");
                return new ResponseEntity<>("Al menos una llamada a los servicios externos falló.", HttpStatus.INTERNAL_SERVER_ERROR);
            }
        } catch (Exception e) {
            logger.error("Error al llamar a los servicios externos: {}", e.getMessage());
            return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    private String processResponse(String responseBody) {
        // Aquí debes procesar el cuerpo de la respuesta para obtener la descripción del paso.
        // Por ahora, simplemente devolvemos el cuerpo de la respuesta tal como está.
        return responseBody;
    }
}
