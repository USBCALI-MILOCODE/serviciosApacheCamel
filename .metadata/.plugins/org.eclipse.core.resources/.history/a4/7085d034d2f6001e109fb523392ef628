package co.com.rodriguezCaicedo.microservice.Orquestador.api;

import co.com.rodriguezCaicedo.microservice.Orquestador.model.JsonApiBodyRequest;
import co.com.rodriguezCaicedo.microservice.Orquestador.model.JsonApiBodyResponseErrors;
import co.com.rodriguezCaicedo.microservice.Orquestador.model.JsonApiBodyResponseSuccess;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;

import org.apache.camel.EndpointInject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.constraints.*;
import javax.validation.Valid;
import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-04-09T19:26:45.506671600-05:00[America/Bogota]")
@RestController
public class GetStepApiController implements GetStepApi {

	private static final Logger logger = LoggerFactory.getLogger(GetStepApiController.class);
	private Object response;

	@EndpointInject(uri = "direct:resolve-enigma")
	private FluentProducerTemplate producerTemplateEnigma;

	@Override
	public ResponseEntity<?> getStepsPost(JsonApiBodyRequest body) {
		boolean isCorrectEnigma = (body.getData().get(0).getEnigma()
				.equalsIgnoreCase("How to put a giraffe into a refrigerator?"));

		if (!isCorrectEnigma) {
			return new ResponseEntity<>(createResponseErrors(body), HttpStatus.BAD_REQUEST);
		}

		try {
			response = producerTemplateEnigma.withBody(body).request();

			return new ResponseEntity<>(response, HttpStatus.OK);
		} catch (Exception e) {
			logger.error("Couldn't Serialize response for content type application/json", e);

			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

}
