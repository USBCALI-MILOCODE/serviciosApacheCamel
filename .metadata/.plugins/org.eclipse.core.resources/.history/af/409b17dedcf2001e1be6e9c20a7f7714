package co.com.rodriguezCaicedo.microservice.resolveEnigmaApi4.api;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;

import co.com.rodriguezCaicedo.microservice.resolveEnigmaApi4.model.ErrorDetail;
import co.com.rodriguezCaicedo.microservice.resolveEnigmaApi4.model.GetEnigmaStepResponse;
import co.com.rodriguezCaicedo.microservice.resolveEnigmaApi4.model.Header;
import co.com.rodriguezCaicedo.microservice.resolveEnigmaApi4.model.JsonApiBodyRequest;
import co.com.rodriguezCaicedo.microservice.resolveEnigmaApi4.servicio.RestTemplateService;

@Controller
public class GetStepApiController implements GetStepApi {
    private final Logger logger = LoggerFactory.getLogger(GetStepApiController.class);

    @Autowired
    private RestTemplateService restTemplateService;
    
    @Override
    public ResponseEntity<?> getStep(@Valid @RequestBody JsonApiBodyRequest body) {
        try {
            // Validación del enigma
            String enigma = body.getData().get(0).getEnigma();
            if (!"How to put a giraffe into a refrigerator?".equals(enigma)) {
                // Si el enigma no es el esperado, devolver un mensaje de error
                ErrorDetail errorDetail = new ErrorDetail();
                errorDetail.setCode("400");
                errorDetail.setDetail("El enigma proporcionado no es válido.");
                errorDetail.setId("1");
                errorDetail.setSource("source");
                errorDetail.setStatus("400");
                errorDetail.setTitle("Error de validación");
                return new ResponseEntity<>(errorDetail, HttpStatus.BAD_REQUEST);
            }

            // Construir la respuesta
            GetEnigmaStepResponse stepResponse = new GetEnigmaStepResponse();
            Header header = body.getData().get(0).getHeader();
            stepResponse.setHeader(header);
            stepResponse.setAnswer("Abrir el refrigerador - Poner la jirafa adentro - Cerrar la puerta");
            
            return new ResponseEntity<>(stepResponse, HttpStatus.OK);
            
        } catch (Exception e) {
            logger.error("Error al procesar la solicitud: {}", e.getMessage());
            return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}
